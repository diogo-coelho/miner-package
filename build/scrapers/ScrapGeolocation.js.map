{"version":3,"names":[],"mappings":"","sources":["scrapers/ScrapGeolocation.js"],"sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BrowserLauncher_1 = __importDefault(require(\"../utils/BrowserLauncher\"));\r\nconst ErrorScrapGeolocation_1 = __importDefault(require(\"./../errors/ErrorScrapGeolocation\"));\r\nclass ScrapGeolocation {\r\n    init(companyName, country) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                this._companyName = companyName;\r\n                this._country = country;\r\n                this._browserLauncher = new BrowserLauncher_1.default();\r\n                const context = yield this._browserLauncher.browserPromise.then((browser) => browser.defaultBrowserContext());\r\n                yield context.overridePermissions(\"https://www.google.com.br/maps\", ['geolocation']);\r\n                this._page = yield context.newPage();\r\n            }\r\n            catch (err) {\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            }\r\n        });\r\n    }\r\n    openPage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this._page.setGeolocation({ latitude: this._country.lat, longitude: this._country.lng, accuracy: 100 });\r\n                yield this._page.setUserAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\");\r\n                yield this._page.goto(\"https://www.google.com.br/maps/search/@\" + this._country.lat + ',' + this._country.lng + ',12z/', {\r\n                    timeout: 120000,\r\n                    waitUntil: 'networkidle2'\r\n                });\r\n                return true;\r\n            }\r\n            catch (err) {\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            }\r\n        });\r\n    }\r\n    searchCompanies() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this.insertCountryData();\r\n                yield this._page.waitForTimeout(2000);\r\n                yield this.insertCompanyData();\r\n                const companiesList = yield this.companiesList();\r\n                if (companiesList) {\r\n                    return companiesList;\r\n                }\r\n                else {\r\n                    const company = [];\r\n                    company.push(yield this.getCompanyLink());\r\n                    return company;\r\n                }\r\n            }\r\n            catch (err) {\r\n                if (err.toString().indexOf('TimeoutError')) {\r\n                    throw new ErrorScrapGeolocation_1.default(`Timeout connection exceed`);\r\n                }\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            }\r\n        });\r\n    }\r\n    insertCountryData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this._page.waitForSelector('#searchboxinput', { timeout: 10000 });\r\n                yield this._page.click('#searchboxinput');\r\n                yield this._page.keyboard.type(`${this._country.code} `);\r\n                yield this._page.click('#searchboxinput');\r\n                yield this._page.waitForResponse(response => response.status() === 200);\r\n                yield this._page.waitForSelector('#searchbox-searchbutton', { timeout: 10000 });\r\n                return true;\r\n            }\r\n            catch (err) {\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            }\r\n        });\r\n    }\r\n    insertCompanyData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this._page.waitForSelector('#searchboxinput', { timeout: 10000 });\r\n                yield this._page.click('#searchboxinput');\r\n                yield this._page.keyboard.type(`${this._companyName} `);\r\n                yield this._page.click('#searchbox-searchbutton');\r\n                yield this._page.waitForResponse(response => response.status() === 200);\r\n                yield this._page.waitForSelector('h1', { timeout: 10000 });\r\n                return true;\r\n            }\r\n            catch (err) {\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            }\r\n        });\r\n    }\r\n    companiesList() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return yield this._page.waitForSelector('.m6QErb.DxyBCb.kA9KIf.dS8AEf.ecceSd', { timeout: 10000 })\r\n                .then(() => __awaiter(this, void 0, void 0, function* () {\r\n                const links = yield this._page.evaluate(() => {\r\n                    const data = [];\r\n                    const elements = document.querySelectorAll('.Nv2PK.tH5CWc.THOPZb');\r\n                    for (const element of elements) {\r\n                        data.push({\r\n                            title: element.querySelector('.fontHeadlineSmall > span').textContent.replace(/\\r?\\n|\\r/g, '').trim(),\r\n                            href: element.querySelector('a').href\r\n                        });\r\n                    }\r\n                    return data;\r\n                });\r\n                return links;\r\n            }))\r\n                // eslint-disable-next-line no-unused-vars\r\n                .catch((err) => {\r\n                return null;\r\n            });\r\n        });\r\n    }\r\n    getCompanyLink() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return yield this._page.waitForSelector('h1', { timeout: 10000 })\r\n                .then(() => __awaiter(this, void 0, void 0, function* () {\r\n                return yield this._page.evaluate(() => {\r\n                    const data = {\r\n                        title: document.querySelector('h1').textContent.replace(/\\r?\\n|\\r/g, '').trim(),\r\n                        href: window.location.href\r\n                    };\r\n                    return data;\r\n                });\r\n            }))\r\n                .catch(err => {\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            });\r\n        });\r\n    }\r\n    getCompanyData(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.openCompany(url);\r\n            const company = yield this.companyInfo();\r\n            return company;\r\n        });\r\n    }\r\n    openCompany(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this._page.setUserAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\");\r\n                yield this._page.goto(url, {\r\n                    timeout: 120000,\r\n                    waitUntil: 'networkidle2'\r\n                });\r\n                return true;\r\n            }\r\n            catch (err) {\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            }\r\n        });\r\n    }\r\n    companyInfo() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return yield this._page.waitForSelector('h1', { timeout: 10000 })\r\n                .then(() => __awaiter(this, void 0, void 0, function* () {\r\n                return yield this._page.evaluate(() => {\r\n                    const data = {\r\n                        name: '',\r\n                        address: undefined,\r\n                        located_in: undefined,\r\n                        website: undefined,\r\n                        telephone: undefined,\r\n                        plus_code: undefined,\r\n                        ratings: undefined,\r\n                        reviews: undefined\r\n                    };\r\n                    if (document.querySelector('h1') != null) {\r\n                        data.name = document.querySelector('h1').textContent.replace(/\\r?\\n|\\r/g, '').trim();\r\n                    }\r\n                    const elements = document.querySelectorAll(\".m6QErb > div > button\");\r\n                    for (const element of elements) {\r\n                        if (element.getAttribute(\"data-item-id\") == \"address\") {\r\n                            data.address = element.textContent.replace(/\\r?\\n|\\r/g, '').trim();\r\n                        }\r\n                        if (element.getAttribute(\"data-item-id\") == \"authority\") {\r\n                            const regex = /^[a-z0-9]+([-.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/gm;\r\n                            if (regex.test(element.textContent.replace(/\\r?\\n|\\r/g, '').trim())) {\r\n                                data.website = element.textContent.replace(/\\r?\\n|\\r/g, '').trim();\r\n                            }\r\n                        }\r\n                        if (element.getAttribute(\"data-item-id\") && element.getAttribute(\"data-item-id\").indexOf('phone:tel:') != -1) {\r\n                            const telephone = element.textContent.replace(/\\r?\\n|\\r/g, '').replace(/\\D/g, '').trim();\r\n                            if (telephone != '' && telephone.length > 6) {\r\n                                data.telephone = telephone;\r\n                            }\r\n                        }\r\n                        if (element.getAttribute(\"data-item-id\") && element.getAttribute(\"data-item-id\") == \"locatedin\") {\r\n                            data.located_in = element.textContent.replace(/\\r?\\n|\\r/g, '').trim();\r\n                        }\r\n                        if (element.getAttribute(\"data-item-id\") && element.getAttribute(\"data-item-id\") == \"oloc\") {\r\n                            data.plus_code = element.textContent.replace(/\\r?\\n|\\r/g, '').trim();\r\n                        }\r\n                    }\r\n                    const ratings = document.querySelectorAll(\"div[jsaction = 'pane.reviewChart.moreReviews'] tr\");\r\n                    if (ratings.length > 0) {\r\n                        data.ratings = [];\r\n                        for (const rate of ratings) {\r\n                            data.ratings.push(rate.getAttribute('aria-label'));\r\n                        }\r\n                    }\r\n                    const reviews = document.querySelectorAll(\"div[jsaction='mouseover:pane.review.in;mouseout:pane.review.out']\");\r\n                    if (reviews.length > 0) {\r\n                        data.reviews = [];\r\n                        for (const review of reviews) {\r\n                            const reviewer_name = review.querySelector(\".WNxzHc.qLhwHc span\") ? review.querySelector(\".WNxzHc.qLhwHc span\").textContent.replace(/\\r?\\n|\\r/g, '').trim() : undefined;\r\n                            const reviews_amount = review.querySelector(\".RfnDt span:nth-of-type(2)\") ? review.querySelector(\".RfnDt span:last-child\").textContent.replace(/\\r?\\n|\\r([^a-zA-Z0-9])/g, '').trim() : undefined;\r\n                            const score = review.querySelector(\".kvMYJc\") ? review.querySelector(\".kvMYJc\").getAttribute(\"aria-label\") : undefined;\r\n                            const date = review.querySelector(\".rsqaWe\") ? review.querySelector(\".rsqaWe\").textContent.replace(/\\r?\\n|\\r/g, '').trim() : undefined;\r\n                            const rev = review.querySelector(\".wiI7pd\") ? review.querySelector(\".wiI7pd\").textContent.replace(/\\r?\\n|\\r/g, '').trim() : undefined;\r\n                            data.reviews.push({ reviewer_name, reviews_amount, score, date, review: rev });\r\n                        }\r\n                    }\r\n                    return data;\r\n                });\r\n            }))\r\n                .catch(err => {\r\n                throw new ErrorScrapGeolocation_1.default(err);\r\n            });\r\n        });\r\n    }\r\n    closePage() {\r\n        this._page.close();\r\n    }\r\n    closeBrowser() {\r\n        this._browserLauncher.closeBrowser();\r\n    }\r\n}\r\nexports.default = ScrapGeolocation;\r\n//# sourceMappingURL=ScrapGeolocation.js.map"],"file":"ScrapGeolocation.js"}